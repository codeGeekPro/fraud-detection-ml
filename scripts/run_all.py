#!/usr/bin/env python3
"""
Script principal pour lancer tout le pipeline de d√©tection de fraudes.

Ce script permet de :
- V√©rifier l'environnement et les d√©pendances
- Lancer l'entra√Ænement des mod√®les
- √âvaluer les performances
- D√©marrer l'API de pr√©diction
- G√©n√©rer les rapports

Usage:
    python scripts/run_all.py --help
    python scripts/run_all.py --train --evaluate
    python scripts/run_all.py --api
    python scripts/run_all.py --all
"""

import sys
import os
import argparse
import logging
import subprocess
import time
from pathlib import Path
from typing import List, Dict, Any

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("logs/run_all.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class FraudDetectionPipeline:
    """Classe principale pour g√©rer le pipeline de d√©tection de fraudes."""

    def __init__(self):
        """Initialise le pipeline."""
        self.project_root = Path(__file__).resolve().parent.parent
        self.scripts_dir = self.project_root / "scripts"
        self.logs_dir = self.project_root / "logs"

        # Cr√©ation des dossiers n√©cessaires
        self.logs_dir.mkdir(exist_ok=True)

        logger.info("üöÄ Pipeline de d√©tection de fraudes initialis√©")

    def check_environment(self) -> bool:
        """
        V√©rifie l'environnement et les d√©pendances.

        Returns:
            bool: True si l'environnement est pr√™t
        """
        logger.info("üîç V√©rification de l'environnement...")

        # V√©rification Python
        python_version = sys.version_info
        if python_version < (3, 8):
            logger.error(f"‚ùå Python {python_version.major}.{python_version.minor} d√©tect√©. Python 3.8+ requis.")
            return False
        logger.info(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")

        # V√©rification des fichiers essentiels
        essential_files = [
            "config/config.yaml",
            "data/raw/creditcard.csv",
            "requirements.txt"
        ]

        for file_path in essential_files:
            full_path = self.project_root / file_path
            if not full_path.exists():
                logger.error(f"‚ùå Fichier manquant : {file_path}")
                return False
            logger.info(f"‚úÖ {file_path}")

        # V√©rification des d√©pendances
        try:
            import pandas as pd
            import numpy as np
            import sklearn
            import xgboost
            import fastapi
            logger.info("‚úÖ D√©pendances principales install√©es")
        except ImportError as e:
            logger.error(f"‚ùå D√©pendance manquante : {e}")
            logger.info("üí° Installez avec : pip install -r requirements.txt")
            return False

        logger.info("üéâ Environnement pr√™t !")
        return True

    def run_training(self) -> bool:
        """
        Lance l'entra√Ænement des mod√®les.

        Returns:
            bool: True si l'entra√Ænement r√©ussit
        """
        logger.info("üèãÔ∏è Lancement de l'entra√Ænement...")

        try:
            # Changement vers le r√©pertoire racine
            os.chdir(self.project_root)

            # Ex√©cution du script d'entra√Ænement
            cmd = [sys.executable, "scripts/train_models.py"]
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=1800)  # 30 min timeout

            if result.returncode == 0:
                logger.info("‚úÖ Entra√Ænement termin√© avec succ√®s")
                logger.info("üìä R√©sultats de l'entra√Ænement :")
                # Afficher les derni√®res lignes du output
                lines = result.stdout.strip().split('\n')
                for line in lines[-10:]:  # Derni√®res 10 lignes
                    if line.strip():
                        logger.info(f"   {line}")
                return True
            else:
                logger.error("‚ùå √âchec de l'entra√Ænement")
                logger.error(f"Erreur : {result.stderr}")
                return False

        except subprocess.TimeoutExpired:
            logger.error("‚ùå Timeout de l'entra√Ænement (30 minutes)")
            return False
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'entra√Ænement : {str(e)}")
            return False

    def run_evaluation(self) -> bool:
        """
        Lance l'√©valuation des mod√®les.

        Returns:
            bool: True si l'√©valuation r√©ussit
        """
        logger.info("üìä Lancement de l'√©valuation...")

        try:
            # Changement vers le r√©pertoire racine
            os.chdir(self.project_root)

            # Ex√©cution du script d'√©valuation
            cmd = [sys.executable, "scripts/evaluate_models.py", "--verbose"]
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=600)  # 10 min timeout

            if result.returncode == 0:
                logger.info("‚úÖ √âvaluation termin√©e avec succ√®s")
                logger.info("üìà R√©sultats de l'√©valuation :")
                # Extraire les m√©triques importantes
                output_lines = result.stdout.strip().split('\n')
                for line in output_lines:
                    if any(keyword in line.lower() for keyword in ['pr-auc', 'roc-auc', 'precision', 'recall', 'f1']):
                        logger.info(f"   {line.strip()}")
                return True
            else:
                logger.error("‚ùå √âchec de l'√©valuation")
                logger.error(f"Erreur : {result.stderr}")
                return False

        except subprocess.TimeoutExpired:
            logger.error("‚ùå Timeout de l'√©valuation (10 minutes)")
            return False
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'√©valuation : {str(e)}")
            return False

    def run_api(self, host: str = "0.0.0.0", port: int = 8000) -> bool:
        """
        Lance l'API de pr√©diction.

        Args:
            host (str): Adresse d'√©coute
            port (int): Port d'√©coute

        Returns:
            bool: True si l'API d√©marre
        """
        logger.info(f"üåê Lancement de l'API sur {host}:{port}...")

        try:
            # Changement vers le r√©pertoire racine
            os.chdir(self.project_root)

            # Commande pour lancer l'API
            cmd = [
                sys.executable, "-m", "uvicorn",
                "src.api.app:app",
                "--host", host,
                "--port", str(port),
                "--reload"
            ]

            logger.info("üöÄ API d√©marr√©e !")
            logger.info(f"üì° Acc√®s : http://{host}:{port}")
            logger.info("üìñ Documentation : http://{host}:{port}/docs")
            logger.info("üí° Appuyez sur Ctrl+C pour arr√™ter")

            # Lancement de l'API (bloquant)
            subprocess.run(cmd)

            return True

        except KeyboardInterrupt:
            logger.info("üõë API arr√™t√©e par l'utilisateur")
            return True
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du lancement de l'API : {str(e)}")
            return False

    def generate_report(self) -> bool:
        """
        G√©n√®re un rapport de synth√®se.

        Returns:
            bool: True si le rapport est g√©n√©r√©
        """
        logger.info("üìã G√©n√©ration du rapport de synth√®se...")

        try:
            # V√©rification des fichiers de r√©sultats
            model_path = self.project_root / "models" / "trained" / "best_model.joblib"
            report_path = self.project_root / "reports" / "evaluation_report.json"

            report_content = f"""
# Rapport de Synth√®se - Pipeline de D√©tection de Fraudes

**Date :** {time.strftime('%Y-%m-%d %H:%M:%S')}
**Statut :** {'‚úÖ R√âUSSI' if model_path.exists() else '‚ùå √âCHEC'}

## üìä √âtat du Syst√®me

### Fichiers G√©n√©r√©s
- **Mod√®le :** {'‚úÖ ' + str(model_path) if model_path.exists() else '‚ùå Manquant'}
- **Rapport d'√©valuation :** {'‚úÖ ' + str(report_path) if report_path.exists() else '‚ùå Manquant'}

### M√©triques Cl√©s
"""

            # Lecture du rapport d'√©valuation si disponible
            if report_path.exists():
                import json
                with open(report_path, 'r') as f:
                    eval_data = json.load(f)

                metrics = eval_data.get('metrics', {})
                report_content += f"""
- **PR-AUC :** {metrics.get('pr_auc', 'N/A'):.4f}
- **ROC-AUC :** {metrics.get('roc_auc', 'N/A'):.4f}
- **Precision :** {metrics.get('precision', 'N/A'):.4f}
- **Recall :** {metrics.get('recall', 'N/A'):.4f}
- **F1-Score :** {metrics.get('f1', 'N/A'):.4f}
"""

            # Sauvegarde du rapport
            summary_path = self.project_root / "reports" / "pipeline_summary.md"
            summary_path.parent.mkdir(exist_ok=True)

            with open(summary_path, 'w', encoding='utf-8') as f:
                f.write(report_content)

            logger.info(f"‚úÖ Rapport g√©n√©r√© : {summary_path}")
            return True

        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la g√©n√©ration du rapport : {str(e)}")
            return False

    def run_pipeline(self, steps: List[str], api_host: str = "0.0.0.0", api_port: int = 8000) -> bool:
        """
        Ex√©cute le pipeline complet.

        Args:
            steps (List[str]): √âtapes √† ex√©cuter
            api_host (str): Host pour l'API
            api_port (int): Port pour l'API

        Returns:
            bool: True si toutes les √©tapes r√©ussissent
        """
        logger.info("üéØ D√©marrage du pipeline de d√©tection de fraudes")
        logger.info(f"√âtapes √† ex√©cuter : {', '.join(steps)}")

        success = True

        # V√©rification de l'environnement
        if not self.check_environment():
            logger.error("‚ùå Environnement non pr√™t. Arr√™t du pipeline.")
            return False

        # Entra√Ænement
        if "train" in steps:
            if not self.run_training():
                success = False
                if "strict" in steps:
                    logger.error("‚ùå Arr√™t du pipeline suite √† l'√©chec de l'entra√Ænement")
                    return False

        # √âvaluation
        if "evaluate" in steps:
            if not self.run_evaluation():
                success = False
                if "strict" in steps:
                    logger.error("‚ùå Arr√™t du pipeline suite √† l'√©chec de l'√©valuation")
                    return False

        # Rapport
        if "report" in steps:
            self.generate_report()

        # API
        if "api" in steps:
            self.run_api(api_host, api_port)

        if success:
            logger.info("üéâ Pipeline termin√© avec succ√®s !")
        else:
            logger.warning("‚ö†Ô∏è Pipeline termin√© avec des avertissements")

        return success


def main():
    """Point d'entr√©e principal."""
    parser = argparse.ArgumentParser(
        description="Pipeline complet de d√©tection de fraudes",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
EXEMPLES D'UTILISATION :

1. V√©rification de l'environnement :
   python scripts/run_all.py --check

2. Entra√Ænement seulement :
   python scripts/run_all.py --train

3. √âvaluation seulement :
   python scripts/run_all.py --evaluate

4. Pipeline complet (entra√Ænement + √©valuation) :
   python scripts/run_all.py --all

5. Pipeline complet + API :
   python scripts/run_all.py --all --api

6. API seulement :
   python scripts/run_all.py --api --host 127.0.0.1 --port 8080

7. Mode strict (arr√™t en cas d'erreur) :
   python scripts/run_all.py --all --strict
        """
    )

    # Options principales
    parser.add_argument("--check", action="store_true",
                       help="V√©rifier l'environnement seulement")
    parser.add_argument("--train", action="store_true",
                       help="Lancer l'entra√Ænement des mod√®les")
    parser.add_argument("--evaluate", action="store_true",
                       help="Lancer l'√©valuation des mod√®les")
    parser.add_argument("--report", action="store_true",
                       help="G√©n√©rer le rapport de synth√®se")
    parser.add_argument("--api", action="store_true",
                       help="Lancer l'API de pr√©diction")

    # Options combin√©es
    parser.add_argument("--all", action="store_true",
                       help="Ex√©cuter tout le pipeline (train + evaluate + report)")

    # Options API
    parser.add_argument("--host", default="0.0.0.0",
                       help="Host pour l'API (d√©faut: 0.0.0.0)")
    parser.add_argument("--port", type=int, default=8000,
                       help="Port pour l'API (d√©faut: 8000)")

    # Options g√©n√©rales
    parser.add_argument("--strict", action="store_true",
                       help="Arr√™ter le pipeline en cas d'erreur")
    parser.add_argument("--verbose", "-v", action="store_true",
                       help="Mode verbose")

    args = parser.parse_args()

    # Configuration du logging
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)

    # Initialisation du pipeline
    pipeline = FraudDetectionPipeline()

    # D√©termination des √©tapes √† ex√©cuter
    steps = []
    if args.check:
        steps.append("check")
    if args.train or args.all:
        steps.append("train")
    if args.evaluate or args.all:
        steps.append("evaluate")
    if args.report or args.all:
        steps.append("report")
    if args.api:
        steps.append("api")
    if args.strict:
        steps.append("strict")

    # Si aucune option sp√©cifi√©e, afficher l'aide
    if not steps:
        parser.print_help()
        return

    # Ex√©cution du pipeline
    try:
        success = pipeline.run_pipeline(steps, args.host, args.port)
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        logger.info("üõë Pipeline interrompu par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå Erreur inattendue : {str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    main()
